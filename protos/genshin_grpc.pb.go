// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: protos/genshin.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GenshinClient is the client API for Genshin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GenshinClient interface {
	GetCharacterInfo(ctx context.Context, in *CharacterRequest, opts ...grpc.CallOption) (*CharacterReply, error)
	GetAllElementsFromType(ctx context.Context, in *TypeRequest, opts ...grpc.CallOption) (*TypeListReply, error)
}

type genshinClient struct {
	cc grpc.ClientConnInterface
}

func NewGenshinClient(cc grpc.ClientConnInterface) GenshinClient {
	return &genshinClient{cc}
}

func (c *genshinClient) GetCharacterInfo(ctx context.Context, in *CharacterRequest, opts ...grpc.CallOption) (*CharacterReply, error) {
	out := new(CharacterReply)
	err := c.cc.Invoke(ctx, "/protos.Genshin/GetCharacterInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genshinClient) GetAllElementsFromType(ctx context.Context, in *TypeRequest, opts ...grpc.CallOption) (*TypeListReply, error) {
	out := new(TypeListReply)
	err := c.cc.Invoke(ctx, "/protos.Genshin/GetAllElementsFromType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenshinServer is the server API for Genshin service.
// All implementations must embed UnimplementedGenshinServer
// for forward compatibility
type GenshinServer interface {
	GetCharacterInfo(context.Context, *CharacterRequest) (*CharacterReply, error)
	GetAllElementsFromType(context.Context, *TypeRequest) (*TypeListReply, error)
	mustEmbedUnimplementedGenshinServer()
}

// UnimplementedGenshinServer must be embedded to have forward compatible implementations.
type UnimplementedGenshinServer struct {
}

func (UnimplementedGenshinServer) GetCharacterInfo(context.Context, *CharacterRequest) (*CharacterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCharacterInfo not implemented")
}
func (UnimplementedGenshinServer) GetAllElementsFromType(context.Context, *TypeRequest) (*TypeListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllElementsFromType not implemented")
}
func (UnimplementedGenshinServer) mustEmbedUnimplementedGenshinServer() {}

// UnsafeGenshinServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GenshinServer will
// result in compilation errors.
type UnsafeGenshinServer interface {
	mustEmbedUnimplementedGenshinServer()
}

func RegisterGenshinServer(s grpc.ServiceRegistrar, srv GenshinServer) {
	s.RegisterService(&Genshin_ServiceDesc, srv)
}

func _Genshin_GetCharacterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharacterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenshinServer).GetCharacterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Genshin/GetCharacterInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenshinServer).GetCharacterInfo(ctx, req.(*CharacterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Genshin_GetAllElementsFromType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenshinServer).GetAllElementsFromType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Genshin/GetAllElementsFromType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenshinServer).GetAllElementsFromType(ctx, req.(*TypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Genshin_ServiceDesc is the grpc.ServiceDesc for Genshin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Genshin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Genshin",
	HandlerType: (*GenshinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCharacterInfo",
			Handler:    _Genshin_GetCharacterInfo_Handler,
		},
		{
			MethodName: "GetAllElementsFromType",
			Handler:    _Genshin_GetAllElementsFromType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/genshin.proto",
}
